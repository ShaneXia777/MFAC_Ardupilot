/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/xiaxin/ardupilot/modules/DroneCAN/DSDL/dronecan/remoteid/20031.Location.uavcan
 */

#ifndef DRONECAN_REMOTEID_LOCATION_HPP_INCLUDED
#define DRONECAN_REMOTEID_LOCATION_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# DroneCAN version of MAVLink OPEN_DRONE_ID_LOCATION
# see MAVLink XML for detailed description
#
uint8[<=20] id_or_mac

uint8 ODID_STATUS_UNDECLARED = 0 # The status of the (UA) Unmanned Aircraft is undefined
uint8 ODID_STATUS_GROUND = 1 # The UA is on the ground
uint8 ODID_STATUS_AIRBORNE = 2 # The UA is in the air
uint8 ODID_STATUS_EMERGENCY = 3 # The UA is having an emergency
uint8 status

uint16 direction # centi-deg, 0-35999
uint16 speed_horizontal # cm/s, max 25425, if unknown use 25500
int16  speed_vertical # positive up, max +/-6200, if unknown use 6300
int32  latitude # degE7
int32  longitude # degE7
float32 altitude_barometric # meters, for unknown use -1000, ref is 29.92inHg or 1013.2mb
float32 altitude_geodetic # meters, for unknown use -1000, WGS84

uint8 ODID_HEIGHT_REF_OVER_TAKEOFF = 0 # The height field is relative to the take-off location
uint8 ODID_HEIGHT_REF_OVER_GROUND = 1 # The height field is relative to ground
uint8 height_reference

float32 height # meters, for unknown use -1000

uint8 ODID_HOR_ACC_UNKNOWN = 0 # The horizontal accuracy is unknown
uint8 ODID_HOR_ACC_10NM = 1 # The horizontal accuracy is smaller than 10 Nautical Miles. 18.52 km
uint8 ODID_HOR_ACC_4NM = 2 # The horizontal accuracy is smaller than 4 Nautical Miles. 7.408 km
uint8 ODID_HOR_ACC_2NM = 3 # The horizontal accuracy is smaller than 2 Nautical Miles. 3.704 km
uint8 ODID_HOR_ACC_1NM = 4 # The horizontal accuracy is smaller than 1 Nautical Miles. 1.852 km
uint8 ODID_HOR_ACC_0_5NM = 5 # The horizontal accuracy is smaller than 0.5 Nautical Miles. 926 m
uint8 ODID_HOR_ACC_0_3NM = 6 # The horizontal accuracy is smaller than 0.3 Nautical Miles. 555.6 m
uint8 ODID_HOR_ACC_0_1NM = 7 # The horizontal accuracy is smaller than 0.1 Nautical Miles. 185.2 m
uint8 ODID_HOR_ACC_0_05NM = 8 # The horizontal accuracy is smaller than 0.05 Nautical Miles. 92.6 m
uint8 ODID_HOR_ACC_30_METER = 9 # The horizontal accuracy is smaller than 30 meter
uint8 ODID_HOR_ACC_10_METER = 10 # The horizontal accuracy is smaller than 10 meter
uint8 ODID_HOR_ACC_3_METER = 11 # The horizontal accuracy is smaller than 3 meter
uint8 ODID_HOR_ACC_1_METER = 12 # The horizontal accuracy is smaller than 1 meter
uint8 horizontal_accuracy

uint8 ODID_VER_ACC_UNKNOWN = 0 # The vertical accuracy is unknown
uint8 ODID_VER_ACC_150_METER = 1 # The vertical accuracy is smaller than 150 meter
uint8 ODID_VER_ACC_45_METER = 2 # The vertical accuracy is smaller than 45 meter
uint8 ODID_VER_ACC_25_METER = 3 # The vertical accuracy is smaller than 25 meter
uint8 ODID_VER_ACC_10_METER = 4 # The vertical accuracy is smaller than 10 meter
uint8 ODID_VER_ACC_3_METER = 5 # The vertical accuracy is smaller than 3 meter
uint8 ODID_VER_ACC_1_METER = 6 # The vertical accuracy is smaller than 1 meter
uint8 vertical_accuracy
uint8 barometer_accuracy

uint8 ODID_SPEED_ACC_UNKNOWN = 0 # The speed accuracy is unknown
uint8 ODID_SPEED_ACC_10_METERS_PER_SECOND = 1 # The speed accuracy is smaller than 10 meters per second
uint8 ODID_SPEED_ACC_3_METERS_PER_SECOND = 2 # The speed accuracy is smaller than 3 meters per second
uint8 ODID_SPEED_ACC_1_METERS_PER_SECOND = 3 # The speed accuracy is smaller than 1 meters per second
uint8 ODID_SPEED_ACC_0_3_METERS_PER_SECOND = 4 # The speed accuracy is smaller than 0.3 meters per second
uint8 speed_accuracy

float32 timestamp # seconds after the full hour with reference to UTC time. Use 0xFFFF if unknown

uint8 ODID_TIME_ACC_0_1_SECOND = 1 # The timestamp accuracy is smaller than or equal to 0.1 second
uint8 ODID_TIME_ACC_0_2_SECOND = 2 # The timestamp accuracy is smaller than or equal to 0.2 second
uint8 ODID_TIME_ACC_0_3_SECOND = 3 # The timestamp accuracy is smaller than or equal to 0.3 second
uint8 ODID_TIME_ACC_0_4_SECOND = 4 # The timestamp accuracy is smaller than or equal to 0.4 second
uint8 ODID_TIME_ACC_0_5_SECOND = 5 # The timestamp accuracy is smaller than or equal to 0.5 second
uint8 ODID_TIME_ACC_0_6_SECOND = 6 # The timestamp accuracy is smaller than or equal to 0.6 second
uint8 ODID_TIME_ACC_0_7_SECOND = 7 # The timestamp accuracy is smaller than or equal to 0.7 second
uint8 ODID_TIME_ACC_0_8_SECOND = 8 # The timestamp accuracy is smaller than or equal to 0.8 second
uint8 ODID_TIME_ACC_0_9_SECOND = 9 # The timestamp accuracy is smaller than or equal to 0.9 second
uint8 ODID_TIME_ACC_1_0_SECOND = 10 # The timestamp accuracy is smaller than or equal to 1.0 second
uint8 ODID_TIME_ACC_1_1_SECOND = 11 # The timestamp accuracy is smaller than or equal to 1.1 second
uint8 ODID_TIME_ACC_1_2_SECOND = 12 # The timestamp accuracy is smaller than or equal to 1.2 second
uint8 ODID_TIME_ACC_1_3_SECOND = 13 # The timestamp accuracy is smaller than or equal to 1.3 second
uint8 ODID_TIME_ACC_1_4_SECOND = 14 # The timestamp accuracy is smaller than or equal to 1.4 second
uint8 ODID_TIME_ACC_1_5_SECOND = 15 # The timestamp accuracy is smaller than or equal to 1.5 second
uint8 timestamp_accuracy
******************************************************************************/

/********************* DSDL signature source definition ***********************
dronecan.remoteid.Location
saturated uint8[<=20] id_or_mac
saturated uint8 status
saturated uint16 direction
saturated uint16 speed_horizontal
saturated int16 speed_vertical
saturated int32 latitude
saturated int32 longitude
saturated float32 altitude_barometric
saturated float32 altitude_geodetic
saturated uint8 height_reference
saturated float32 height
saturated uint8 horizontal_accuracy
saturated uint8 vertical_accuracy
saturated uint8 barometer_accuracy
saturated uint8 speed_accuracy
saturated float32 timestamp
saturated uint8 timestamp_accuracy
******************************************************************************/

#undef id_or_mac
#undef status
#undef direction
#undef speed_horizontal
#undef speed_vertical
#undef latitude
#undef longitude
#undef altitude_barometric
#undef altitude_geodetic
#undef height_reference
#undef height
#undef horizontal_accuracy
#undef vertical_accuracy
#undef barometer_accuracy
#undef speed_accuracy
#undef timestamp
#undef timestamp_accuracy
#undef ODID_STATUS_UNDECLARED
#undef ODID_STATUS_GROUND
#undef ODID_STATUS_AIRBORNE
#undef ODID_STATUS_EMERGENCY
#undef ODID_HEIGHT_REF_OVER_TAKEOFF
#undef ODID_HEIGHT_REF_OVER_GROUND
#undef ODID_HOR_ACC_UNKNOWN
#undef ODID_HOR_ACC_10NM
#undef ODID_HOR_ACC_4NM
#undef ODID_HOR_ACC_2NM
#undef ODID_HOR_ACC_1NM
#undef ODID_HOR_ACC_0_5NM
#undef ODID_HOR_ACC_0_3NM
#undef ODID_HOR_ACC_0_1NM
#undef ODID_HOR_ACC_0_05NM
#undef ODID_HOR_ACC_30_METER
#undef ODID_HOR_ACC_10_METER
#undef ODID_HOR_ACC_3_METER
#undef ODID_HOR_ACC_1_METER
#undef ODID_VER_ACC_UNKNOWN
#undef ODID_VER_ACC_150_METER
#undef ODID_VER_ACC_45_METER
#undef ODID_VER_ACC_25_METER
#undef ODID_VER_ACC_10_METER
#undef ODID_VER_ACC_3_METER
#undef ODID_VER_ACC_1_METER
#undef ODID_SPEED_ACC_UNKNOWN
#undef ODID_SPEED_ACC_10_METERS_PER_SECOND
#undef ODID_SPEED_ACC_3_METERS_PER_SECOND
#undef ODID_SPEED_ACC_1_METERS_PER_SECOND
#undef ODID_SPEED_ACC_0_3_METERS_PER_SECOND
#undef ODID_TIME_ACC_0_1_SECOND
#undef ODID_TIME_ACC_0_2_SECOND
#undef ODID_TIME_ACC_0_3_SECOND
#undef ODID_TIME_ACC_0_4_SECOND
#undef ODID_TIME_ACC_0_5_SECOND
#undef ODID_TIME_ACC_0_6_SECOND
#undef ODID_TIME_ACC_0_7_SECOND
#undef ODID_TIME_ACC_0_8_SECOND
#undef ODID_TIME_ACC_0_9_SECOND
#undef ODID_TIME_ACC_1_0_SECOND
#undef ODID_TIME_ACC_1_1_SECOND
#undef ODID_TIME_ACC_1_2_SECOND
#undef ODID_TIME_ACC_1_3_SECOND
#undef ODID_TIME_ACC_1_4_SECOND
#undef ODID_TIME_ACC_1_5_SECOND

namespace dronecan
{
namespace remoteid
{

template <int _tmpl>
struct UAVCAN_EXPORT Location_
{
    typedef const Location_<_tmpl>& ParameterType;
    typedef Location_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_STATUS_UNDECLARED;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_STATUS_GROUND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_STATUS_AIRBORNE;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_STATUS_EMERGENCY;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_HEIGHT_REF_OVER_TAKEOFF;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_HEIGHT_REF_OVER_GROUND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_HOR_ACC_UNKNOWN;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_HOR_ACC_10NM;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_HOR_ACC_4NM;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_HOR_ACC_2NM;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_HOR_ACC_1NM;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_HOR_ACC_0_5NM;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_HOR_ACC_0_3NM;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_HOR_ACC_0_1NM;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_HOR_ACC_0_05NM;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_HOR_ACC_30_METER;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_HOR_ACC_10_METER;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_HOR_ACC_3_METER;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_HOR_ACC_1_METER;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_VER_ACC_UNKNOWN;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_VER_ACC_150_METER;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_VER_ACC_45_METER;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_VER_ACC_25_METER;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_VER_ACC_10_METER;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_VER_ACC_3_METER;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_VER_ACC_1_METER;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_SPEED_ACC_UNKNOWN;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_SPEED_ACC_10_METERS_PER_SECOND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_SPEED_ACC_3_METERS_PER_SECOND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_SPEED_ACC_1_METERS_PER_SECOND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_SPEED_ACC_0_3_METERS_PER_SECOND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_TIME_ACC_0_1_SECOND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_TIME_ACC_0_2_SECOND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_TIME_ACC_0_3_SECOND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_TIME_ACC_0_4_SECOND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_TIME_ACC_0_5_SECOND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_TIME_ACC_0_6_SECOND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_TIME_ACC_0_7_SECOND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_TIME_ACC_0_8_SECOND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_TIME_ACC_0_9_SECOND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_TIME_ACC_1_0_SECOND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_TIME_ACC_1_1_SECOND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_TIME_ACC_1_2_SECOND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_TIME_ACC_1_3_SECOND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_TIME_ACC_1_4_SECOND;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_TIME_ACC_1_5_SECOND;
    };

    struct FieldTypes
    {
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 20 > id_or_mac;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > status;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > direction;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > speed_horizontal;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > speed_vertical;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > latitude;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > longitude;
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > altitude_barometric;
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > altitude_geodetic;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > height_reference;
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > height;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > horizontal_accuracy;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > vertical_accuracy;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > barometer_accuracy;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > speed_accuracy;
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > timestamp;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > timestamp_accuracy;
    };

    enum
    {
        MinBitLen
            = FieldTypes::id_or_mac::MinBitLen
            + FieldTypes::status::MinBitLen
            + FieldTypes::direction::MinBitLen
            + FieldTypes::speed_horizontal::MinBitLen
            + FieldTypes::speed_vertical::MinBitLen
            + FieldTypes::latitude::MinBitLen
            + FieldTypes::longitude::MinBitLen
            + FieldTypes::altitude_barometric::MinBitLen
            + FieldTypes::altitude_geodetic::MinBitLen
            + FieldTypes::height_reference::MinBitLen
            + FieldTypes::height::MinBitLen
            + FieldTypes::horizontal_accuracy::MinBitLen
            + FieldTypes::vertical_accuracy::MinBitLen
            + FieldTypes::barometer_accuracy::MinBitLen
            + FieldTypes::speed_accuracy::MinBitLen
            + FieldTypes::timestamp::MinBitLen
            + FieldTypes::timestamp_accuracy::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::id_or_mac::MaxBitLen
            + FieldTypes::status::MaxBitLen
            + FieldTypes::direction::MaxBitLen
            + FieldTypes::speed_horizontal::MaxBitLen
            + FieldTypes::speed_vertical::MaxBitLen
            + FieldTypes::latitude::MaxBitLen
            + FieldTypes::longitude::MaxBitLen
            + FieldTypes::altitude_barometric::MaxBitLen
            + FieldTypes::altitude_geodetic::MaxBitLen
            + FieldTypes::height_reference::MaxBitLen
            + FieldTypes::height::MaxBitLen
            + FieldTypes::horizontal_accuracy::MaxBitLen
            + FieldTypes::vertical_accuracy::MaxBitLen
            + FieldTypes::barometer_accuracy::MaxBitLen
            + FieldTypes::speed_accuracy::MaxBitLen
            + FieldTypes::timestamp::MaxBitLen
            + FieldTypes::timestamp_accuracy::MaxBitLen
    };

    // Constants
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_STATUS_UNDECLARED >::Type ODID_STATUS_UNDECLARED; // 0
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_STATUS_GROUND >::Type ODID_STATUS_GROUND; // 1
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_STATUS_AIRBORNE >::Type ODID_STATUS_AIRBORNE; // 2
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_STATUS_EMERGENCY >::Type ODID_STATUS_EMERGENCY; // 3
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_HEIGHT_REF_OVER_TAKEOFF >::Type ODID_HEIGHT_REF_OVER_TAKEOFF; // 0
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_HEIGHT_REF_OVER_GROUND >::Type ODID_HEIGHT_REF_OVER_GROUND; // 1
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_HOR_ACC_UNKNOWN >::Type ODID_HOR_ACC_UNKNOWN; // 0
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_HOR_ACC_10NM >::Type ODID_HOR_ACC_10NM; // 1
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_HOR_ACC_4NM >::Type ODID_HOR_ACC_4NM; // 2
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_HOR_ACC_2NM >::Type ODID_HOR_ACC_2NM; // 3
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_HOR_ACC_1NM >::Type ODID_HOR_ACC_1NM; // 4
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_HOR_ACC_0_5NM >::Type ODID_HOR_ACC_0_5NM; // 5
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_HOR_ACC_0_3NM >::Type ODID_HOR_ACC_0_3NM; // 6
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_HOR_ACC_0_1NM >::Type ODID_HOR_ACC_0_1NM; // 7
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_HOR_ACC_0_05NM >::Type ODID_HOR_ACC_0_05NM; // 8
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_HOR_ACC_30_METER >::Type ODID_HOR_ACC_30_METER; // 9
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_HOR_ACC_10_METER >::Type ODID_HOR_ACC_10_METER; // 10
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_HOR_ACC_3_METER >::Type ODID_HOR_ACC_3_METER; // 11
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_HOR_ACC_1_METER >::Type ODID_HOR_ACC_1_METER; // 12
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_VER_ACC_UNKNOWN >::Type ODID_VER_ACC_UNKNOWN; // 0
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_VER_ACC_150_METER >::Type ODID_VER_ACC_150_METER; // 1
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_VER_ACC_45_METER >::Type ODID_VER_ACC_45_METER; // 2
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_VER_ACC_25_METER >::Type ODID_VER_ACC_25_METER; // 3
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_VER_ACC_10_METER >::Type ODID_VER_ACC_10_METER; // 4
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_VER_ACC_3_METER >::Type ODID_VER_ACC_3_METER; // 5
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_VER_ACC_1_METER >::Type ODID_VER_ACC_1_METER; // 6
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_SPEED_ACC_UNKNOWN >::Type ODID_SPEED_ACC_UNKNOWN; // 0
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_SPEED_ACC_10_METERS_PER_SECOND >::Type ODID_SPEED_ACC_10_METERS_PER_SECOND; // 1
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_SPEED_ACC_3_METERS_PER_SECOND >::Type ODID_SPEED_ACC_3_METERS_PER_SECOND; // 2
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_SPEED_ACC_1_METERS_PER_SECOND >::Type ODID_SPEED_ACC_1_METERS_PER_SECOND; // 3
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_SPEED_ACC_0_3_METERS_PER_SECOND >::Type ODID_SPEED_ACC_0_3_METERS_PER_SECOND; // 4
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_TIME_ACC_0_1_SECOND >::Type ODID_TIME_ACC_0_1_SECOND; // 1
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_TIME_ACC_0_2_SECOND >::Type ODID_TIME_ACC_0_2_SECOND; // 2
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_TIME_ACC_0_3_SECOND >::Type ODID_TIME_ACC_0_3_SECOND; // 3
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_TIME_ACC_0_4_SECOND >::Type ODID_TIME_ACC_0_4_SECOND; // 4
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_TIME_ACC_0_5_SECOND >::Type ODID_TIME_ACC_0_5_SECOND; // 5
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_TIME_ACC_0_6_SECOND >::Type ODID_TIME_ACC_0_6_SECOND; // 6
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_TIME_ACC_0_7_SECOND >::Type ODID_TIME_ACC_0_7_SECOND; // 7
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_TIME_ACC_0_8_SECOND >::Type ODID_TIME_ACC_0_8_SECOND; // 8
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_TIME_ACC_0_9_SECOND >::Type ODID_TIME_ACC_0_9_SECOND; // 9
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_TIME_ACC_1_0_SECOND >::Type ODID_TIME_ACC_1_0_SECOND; // 10
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_TIME_ACC_1_1_SECOND >::Type ODID_TIME_ACC_1_1_SECOND; // 11
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_TIME_ACC_1_2_SECOND >::Type ODID_TIME_ACC_1_2_SECOND; // 12
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_TIME_ACC_1_3_SECOND >::Type ODID_TIME_ACC_1_3_SECOND; // 13
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_TIME_ACC_1_4_SECOND >::Type ODID_TIME_ACC_1_4_SECOND; // 14
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_TIME_ACC_1_5_SECOND >::Type ODID_TIME_ACC_1_5_SECOND; // 15

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::id_or_mac >::Type id_or_mac;
    typename ::uavcan::StorageType< typename FieldTypes::status >::Type status;
    typename ::uavcan::StorageType< typename FieldTypes::direction >::Type direction;
    typename ::uavcan::StorageType< typename FieldTypes::speed_horizontal >::Type speed_horizontal;
    typename ::uavcan::StorageType< typename FieldTypes::speed_vertical >::Type speed_vertical;
    typename ::uavcan::StorageType< typename FieldTypes::latitude >::Type latitude;
    typename ::uavcan::StorageType< typename FieldTypes::longitude >::Type longitude;
    typename ::uavcan::StorageType< typename FieldTypes::altitude_barometric >::Type altitude_barometric;
    typename ::uavcan::StorageType< typename FieldTypes::altitude_geodetic >::Type altitude_geodetic;
    typename ::uavcan::StorageType< typename FieldTypes::height_reference >::Type height_reference;
    typename ::uavcan::StorageType< typename FieldTypes::height >::Type height;
    typename ::uavcan::StorageType< typename FieldTypes::horizontal_accuracy >::Type horizontal_accuracy;
    typename ::uavcan::StorageType< typename FieldTypes::vertical_accuracy >::Type vertical_accuracy;
    typename ::uavcan::StorageType< typename FieldTypes::barometer_accuracy >::Type barometer_accuracy;
    typename ::uavcan::StorageType< typename FieldTypes::speed_accuracy >::Type speed_accuracy;
    typename ::uavcan::StorageType< typename FieldTypes::timestamp >::Type timestamp;
    typename ::uavcan::StorageType< typename FieldTypes::timestamp_accuracy >::Type timestamp_accuracy;

    Location_()
        : id_or_mac()
        , status()
        , direction()
        , speed_horizontal()
        , speed_vertical()
        , latitude()
        , longitude()
        , altitude_barometric()
        , altitude_geodetic()
        , height_reference()
        , height()
        , horizontal_accuracy()
        , vertical_accuracy()
        , barometer_accuracy()
        , speed_accuracy()
        , timestamp()
        , timestamp_accuracy()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<461 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 20031 };

    static const char* getDataTypeFullName()
    {
        return "dronecan.remoteid.Location";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool Location_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        id_or_mac == rhs.id_or_mac &&
        status == rhs.status &&
        direction == rhs.direction &&
        speed_horizontal == rhs.speed_horizontal &&
        speed_vertical == rhs.speed_vertical &&
        latitude == rhs.latitude &&
        longitude == rhs.longitude &&
        altitude_barometric == rhs.altitude_barometric &&
        altitude_geodetic == rhs.altitude_geodetic &&
        height_reference == rhs.height_reference &&
        height == rhs.height &&
        horizontal_accuracy == rhs.horizontal_accuracy &&
        vertical_accuracy == rhs.vertical_accuracy &&
        barometer_accuracy == rhs.barometer_accuracy &&
        speed_accuracy == rhs.speed_accuracy &&
        timestamp == rhs.timestamp &&
        timestamp_accuracy == rhs.timestamp_accuracy;
}

template <int _tmpl>
bool Location_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(id_or_mac, rhs.id_or_mac) &&
        ::uavcan::areClose(status, rhs.status) &&
        ::uavcan::areClose(direction, rhs.direction) &&
        ::uavcan::areClose(speed_horizontal, rhs.speed_horizontal) &&
        ::uavcan::areClose(speed_vertical, rhs.speed_vertical) &&
        ::uavcan::areClose(latitude, rhs.latitude) &&
        ::uavcan::areClose(longitude, rhs.longitude) &&
        ::uavcan::areClose(altitude_barometric, rhs.altitude_barometric) &&
        ::uavcan::areClose(altitude_geodetic, rhs.altitude_geodetic) &&
        ::uavcan::areClose(height_reference, rhs.height_reference) &&
        ::uavcan::areClose(height, rhs.height) &&
        ::uavcan::areClose(horizontal_accuracy, rhs.horizontal_accuracy) &&
        ::uavcan::areClose(vertical_accuracy, rhs.vertical_accuracy) &&
        ::uavcan::areClose(barometer_accuracy, rhs.barometer_accuracy) &&
        ::uavcan::areClose(speed_accuracy, rhs.speed_accuracy) &&
        ::uavcan::areClose(timestamp, rhs.timestamp) &&
        ::uavcan::areClose(timestamp_accuracy, rhs.timestamp_accuracy);
}

template <int _tmpl>
int Location_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::id_or_mac::encode(self.id_or_mac, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::status::encode(self.status, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::direction::encode(self.direction, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::speed_horizontal::encode(self.speed_horizontal, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::speed_vertical::encode(self.speed_vertical, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::latitude::encode(self.latitude, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::longitude::encode(self.longitude, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::altitude_barometric::encode(self.altitude_barometric, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::altitude_geodetic::encode(self.altitude_geodetic, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::height_reference::encode(self.height_reference, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::height::encode(self.height, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::horizontal_accuracy::encode(self.horizontal_accuracy, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::vertical_accuracy::encode(self.vertical_accuracy, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::barometer_accuracy::encode(self.barometer_accuracy, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::speed_accuracy::encode(self.speed_accuracy, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::timestamp::encode(self.timestamp, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::timestamp_accuracy::encode(self.timestamp_accuracy, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int Location_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::id_or_mac::decode(self.id_or_mac, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::status::decode(self.status, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::direction::decode(self.direction, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::speed_horizontal::decode(self.speed_horizontal, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::speed_vertical::decode(self.speed_vertical, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::latitude::decode(self.latitude, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::longitude::decode(self.longitude, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::altitude_barometric::decode(self.altitude_barometric, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::altitude_geodetic::decode(self.altitude_geodetic, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::height_reference::decode(self.height_reference, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::height::decode(self.height, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::horizontal_accuracy::decode(self.horizontal_accuracy, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::vertical_accuracy::decode(self.vertical_accuracy, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::barometer_accuracy::decode(self.barometer_accuracy, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::speed_accuracy::decode(self.speed_accuracy, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::timestamp::decode(self.timestamp, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::timestamp_accuracy::decode(self.timestamp_accuracy, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Location_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xEAA3A2C5BCB14CAAULL);

    FieldTypes::id_or_mac::extendDataTypeSignature(signature);
    FieldTypes::status::extendDataTypeSignature(signature);
    FieldTypes::direction::extendDataTypeSignature(signature);
    FieldTypes::speed_horizontal::extendDataTypeSignature(signature);
    FieldTypes::speed_vertical::extendDataTypeSignature(signature);
    FieldTypes::latitude::extendDataTypeSignature(signature);
    FieldTypes::longitude::extendDataTypeSignature(signature);
    FieldTypes::altitude_barometric::extendDataTypeSignature(signature);
    FieldTypes::altitude_geodetic::extendDataTypeSignature(signature);
    FieldTypes::height_reference::extendDataTypeSignature(signature);
    FieldTypes::height::extendDataTypeSignature(signature);
    FieldTypes::horizontal_accuracy::extendDataTypeSignature(signature);
    FieldTypes::vertical_accuracy::extendDataTypeSignature(signature);
    FieldTypes::barometer_accuracy::extendDataTypeSignature(signature);
    FieldTypes::speed_accuracy::extendDataTypeSignature(signature);
    FieldTypes::timestamp::extendDataTypeSignature(signature);
    FieldTypes::timestamp_accuracy::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_STATUS_UNDECLARED >::Type
    Location_<_tmpl>::ODID_STATUS_UNDECLARED = 0U; // 0

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_STATUS_GROUND >::Type
    Location_<_tmpl>::ODID_STATUS_GROUND = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_STATUS_AIRBORNE >::Type
    Location_<_tmpl>::ODID_STATUS_AIRBORNE = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_STATUS_EMERGENCY >::Type
    Location_<_tmpl>::ODID_STATUS_EMERGENCY = 3U; // 3

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_HEIGHT_REF_OVER_TAKEOFF >::Type
    Location_<_tmpl>::ODID_HEIGHT_REF_OVER_TAKEOFF = 0U; // 0

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_HEIGHT_REF_OVER_GROUND >::Type
    Location_<_tmpl>::ODID_HEIGHT_REF_OVER_GROUND = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_HOR_ACC_UNKNOWN >::Type
    Location_<_tmpl>::ODID_HOR_ACC_UNKNOWN = 0U; // 0

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_HOR_ACC_10NM >::Type
    Location_<_tmpl>::ODID_HOR_ACC_10NM = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_HOR_ACC_4NM >::Type
    Location_<_tmpl>::ODID_HOR_ACC_4NM = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_HOR_ACC_2NM >::Type
    Location_<_tmpl>::ODID_HOR_ACC_2NM = 3U; // 3

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_HOR_ACC_1NM >::Type
    Location_<_tmpl>::ODID_HOR_ACC_1NM = 4U; // 4

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_HOR_ACC_0_5NM >::Type
    Location_<_tmpl>::ODID_HOR_ACC_0_5NM = 5U; // 5

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_HOR_ACC_0_3NM >::Type
    Location_<_tmpl>::ODID_HOR_ACC_0_3NM = 6U; // 6

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_HOR_ACC_0_1NM >::Type
    Location_<_tmpl>::ODID_HOR_ACC_0_1NM = 7U; // 7

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_HOR_ACC_0_05NM >::Type
    Location_<_tmpl>::ODID_HOR_ACC_0_05NM = 8U; // 8

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_HOR_ACC_30_METER >::Type
    Location_<_tmpl>::ODID_HOR_ACC_30_METER = 9U; // 9

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_HOR_ACC_10_METER >::Type
    Location_<_tmpl>::ODID_HOR_ACC_10_METER = 10U; // 10

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_HOR_ACC_3_METER >::Type
    Location_<_tmpl>::ODID_HOR_ACC_3_METER = 11U; // 11

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_HOR_ACC_1_METER >::Type
    Location_<_tmpl>::ODID_HOR_ACC_1_METER = 12U; // 12

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_VER_ACC_UNKNOWN >::Type
    Location_<_tmpl>::ODID_VER_ACC_UNKNOWN = 0U; // 0

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_VER_ACC_150_METER >::Type
    Location_<_tmpl>::ODID_VER_ACC_150_METER = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_VER_ACC_45_METER >::Type
    Location_<_tmpl>::ODID_VER_ACC_45_METER = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_VER_ACC_25_METER >::Type
    Location_<_tmpl>::ODID_VER_ACC_25_METER = 3U; // 3

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_VER_ACC_10_METER >::Type
    Location_<_tmpl>::ODID_VER_ACC_10_METER = 4U; // 4

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_VER_ACC_3_METER >::Type
    Location_<_tmpl>::ODID_VER_ACC_3_METER = 5U; // 5

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_VER_ACC_1_METER >::Type
    Location_<_tmpl>::ODID_VER_ACC_1_METER = 6U; // 6

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_SPEED_ACC_UNKNOWN >::Type
    Location_<_tmpl>::ODID_SPEED_ACC_UNKNOWN = 0U; // 0

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_SPEED_ACC_10_METERS_PER_SECOND >::Type
    Location_<_tmpl>::ODID_SPEED_ACC_10_METERS_PER_SECOND = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_SPEED_ACC_3_METERS_PER_SECOND >::Type
    Location_<_tmpl>::ODID_SPEED_ACC_3_METERS_PER_SECOND = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_SPEED_ACC_1_METERS_PER_SECOND >::Type
    Location_<_tmpl>::ODID_SPEED_ACC_1_METERS_PER_SECOND = 3U; // 3

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_SPEED_ACC_0_3_METERS_PER_SECOND >::Type
    Location_<_tmpl>::ODID_SPEED_ACC_0_3_METERS_PER_SECOND = 4U; // 4

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_TIME_ACC_0_1_SECOND >::Type
    Location_<_tmpl>::ODID_TIME_ACC_0_1_SECOND = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_TIME_ACC_0_2_SECOND >::Type
    Location_<_tmpl>::ODID_TIME_ACC_0_2_SECOND = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_TIME_ACC_0_3_SECOND >::Type
    Location_<_tmpl>::ODID_TIME_ACC_0_3_SECOND = 3U; // 3

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_TIME_ACC_0_4_SECOND >::Type
    Location_<_tmpl>::ODID_TIME_ACC_0_4_SECOND = 4U; // 4

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_TIME_ACC_0_5_SECOND >::Type
    Location_<_tmpl>::ODID_TIME_ACC_0_5_SECOND = 5U; // 5

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_TIME_ACC_0_6_SECOND >::Type
    Location_<_tmpl>::ODID_TIME_ACC_0_6_SECOND = 6U; // 6

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_TIME_ACC_0_7_SECOND >::Type
    Location_<_tmpl>::ODID_TIME_ACC_0_7_SECOND = 7U; // 7

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_TIME_ACC_0_8_SECOND >::Type
    Location_<_tmpl>::ODID_TIME_ACC_0_8_SECOND = 8U; // 8

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_TIME_ACC_0_9_SECOND >::Type
    Location_<_tmpl>::ODID_TIME_ACC_0_9_SECOND = 9U; // 9

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_TIME_ACC_1_0_SECOND >::Type
    Location_<_tmpl>::ODID_TIME_ACC_1_0_SECOND = 10U; // 10

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_TIME_ACC_1_1_SECOND >::Type
    Location_<_tmpl>::ODID_TIME_ACC_1_1_SECOND = 11U; // 11

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_TIME_ACC_1_2_SECOND >::Type
    Location_<_tmpl>::ODID_TIME_ACC_1_2_SECOND = 12U; // 12

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_TIME_ACC_1_3_SECOND >::Type
    Location_<_tmpl>::ODID_TIME_ACC_1_3_SECOND = 13U; // 13

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_TIME_ACC_1_4_SECOND >::Type
    Location_<_tmpl>::ODID_TIME_ACC_1_4_SECOND = 14U; // 14

template <int _tmpl>
const typename ::uavcan::StorageType< typename Location_<_tmpl>::ConstantTypes::ODID_TIME_ACC_1_5_SECOND >::Type
    Location_<_tmpl>::ODID_TIME_ACC_1_5_SECOND = 15U; // 15

/*
 * Final typedef
 */
typedef Location_<0> Location;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::dronecan::remoteid::Location > _uavcan_gdtr_registrator_Location;

}

} // Namespace remoteid
} // Namespace dronecan

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::dronecan::remoteid::Location >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::dronecan::remoteid::Location::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::dronecan::remoteid::Location >::stream(Stream& s, ::dronecan::remoteid::Location::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "id_or_mac: ";
    YamlStreamer< ::dronecan::remoteid::Location::FieldTypes::id_or_mac >::stream(s, obj.id_or_mac, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "status: ";
    YamlStreamer< ::dronecan::remoteid::Location::FieldTypes::status >::stream(s, obj.status, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "direction: ";
    YamlStreamer< ::dronecan::remoteid::Location::FieldTypes::direction >::stream(s, obj.direction, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "speed_horizontal: ";
    YamlStreamer< ::dronecan::remoteid::Location::FieldTypes::speed_horizontal >::stream(s, obj.speed_horizontal, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "speed_vertical: ";
    YamlStreamer< ::dronecan::remoteid::Location::FieldTypes::speed_vertical >::stream(s, obj.speed_vertical, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "latitude: ";
    YamlStreamer< ::dronecan::remoteid::Location::FieldTypes::latitude >::stream(s, obj.latitude, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "longitude: ";
    YamlStreamer< ::dronecan::remoteid::Location::FieldTypes::longitude >::stream(s, obj.longitude, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "altitude_barometric: ";
    YamlStreamer< ::dronecan::remoteid::Location::FieldTypes::altitude_barometric >::stream(s, obj.altitude_barometric, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "altitude_geodetic: ";
    YamlStreamer< ::dronecan::remoteid::Location::FieldTypes::altitude_geodetic >::stream(s, obj.altitude_geodetic, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "height_reference: ";
    YamlStreamer< ::dronecan::remoteid::Location::FieldTypes::height_reference >::stream(s, obj.height_reference, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "height: ";
    YamlStreamer< ::dronecan::remoteid::Location::FieldTypes::height >::stream(s, obj.height, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "horizontal_accuracy: ";
    YamlStreamer< ::dronecan::remoteid::Location::FieldTypes::horizontal_accuracy >::stream(s, obj.horizontal_accuracy, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "vertical_accuracy: ";
    YamlStreamer< ::dronecan::remoteid::Location::FieldTypes::vertical_accuracy >::stream(s, obj.vertical_accuracy, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "barometer_accuracy: ";
    YamlStreamer< ::dronecan::remoteid::Location::FieldTypes::barometer_accuracy >::stream(s, obj.barometer_accuracy, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "speed_accuracy: ";
    YamlStreamer< ::dronecan::remoteid::Location::FieldTypes::speed_accuracy >::stream(s, obj.speed_accuracy, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "timestamp: ";
    YamlStreamer< ::dronecan::remoteid::Location::FieldTypes::timestamp >::stream(s, obj.timestamp, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "timestamp_accuracy: ";
    YamlStreamer< ::dronecan::remoteid::Location::FieldTypes::timestamp_accuracy >::stream(s, obj.timestamp_accuracy, level + 1);
}

}

namespace dronecan
{
namespace remoteid
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::dronecan::remoteid::Location::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::dronecan::remoteid::Location >::stream(s, obj, 0);
    return s;
}

} // Namespace remoteid
} // Namespace dronecan

#endif // DRONECAN_REMOTEID_LOCATION_HPP_INCLUDED