/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/xiaxin/ardupilot/modules/DroneCAN/DSDL/dronecan/remoteid/20032.SelfID.uavcan
 */

#ifndef DRONECAN_REMOTEID_SELFID_HPP_INCLUDED
#define DRONECAN_REMOTEID_SELFID_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# DroneCAN version of MAVLink OPEN_DRONE_ID_SELF_ID
# see MAVLink XML for detailed description
#
uint8[<=20] id_or_mac

uint8 ODID_DESC_TYPE_TEXT = 0 # Free-form text description of the purpose of the flight
uint8 description_type
uint8[<=23] description
******************************************************************************/

/********************* DSDL signature source definition ***********************
dronecan.remoteid.SelfID
saturated uint8[<=20] id_or_mac
saturated uint8 description_type
saturated uint8[<=23] description
******************************************************************************/

#undef id_or_mac
#undef description_type
#undef description
#undef ODID_DESC_TYPE_TEXT

namespace dronecan
{
namespace remoteid
{

template <int _tmpl>
struct UAVCAN_EXPORT SelfID_
{
    typedef const SelfID_<_tmpl>& ParameterType;
    typedef SelfID_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > ODID_DESC_TYPE_TEXT;
    };

    struct FieldTypes
    {
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 20 > id_or_mac;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > description_type;
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 23 > description;
    };

    enum
    {
        MinBitLen
            = FieldTypes::id_or_mac::MinBitLen
            + FieldTypes::description_type::MinBitLen
            + FieldTypes::description::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::id_or_mac::MaxBitLen
            + FieldTypes::description_type::MaxBitLen
            + FieldTypes::description::MaxBitLen
    };

    // Constants
    static const typename ::uavcan::StorageType< typename ConstantTypes::ODID_DESC_TYPE_TEXT >::Type ODID_DESC_TYPE_TEXT; // 0

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::id_or_mac >::Type id_or_mac;
    typename ::uavcan::StorageType< typename FieldTypes::description_type >::Type description_type;
    typename ::uavcan::StorageType< typename FieldTypes::description >::Type description;

    SelfID_()
        : id_or_mac()
        , description_type()
        , description()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<362 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 20032 };

    static const char* getDataTypeFullName()
    {
        return "dronecan.remoteid.SelfID";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool SelfID_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        id_or_mac == rhs.id_or_mac &&
        description_type == rhs.description_type &&
        description == rhs.description;
}

template <int _tmpl>
bool SelfID_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(id_or_mac, rhs.id_or_mac) &&
        ::uavcan::areClose(description_type, rhs.description_type) &&
        ::uavcan::areClose(description, rhs.description);
}

template <int _tmpl>
int SelfID_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::id_or_mac::encode(self.id_or_mac, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::description_type::encode(self.description_type, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::description::encode(self.description, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int SelfID_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::id_or_mac::decode(self.id_or_mac, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::description_type::decode(self.description_type, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::description::decode(self.description, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature SelfID_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x59BE81DC4C06A185ULL);

    FieldTypes::id_or_mac::extendDataTypeSignature(signature);
    FieldTypes::description_type::extendDataTypeSignature(signature);
    FieldTypes::description::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename SelfID_<_tmpl>::ConstantTypes::ODID_DESC_TYPE_TEXT >::Type
    SelfID_<_tmpl>::ODID_DESC_TYPE_TEXT = 0U; // 0

/*
 * Final typedef
 */
typedef SelfID_<0> SelfID;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::dronecan::remoteid::SelfID > _uavcan_gdtr_registrator_SelfID;

}

} // Namespace remoteid
} // Namespace dronecan

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::dronecan::remoteid::SelfID >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::dronecan::remoteid::SelfID::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::dronecan::remoteid::SelfID >::stream(Stream& s, ::dronecan::remoteid::SelfID::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "id_or_mac: ";
    YamlStreamer< ::dronecan::remoteid::SelfID::FieldTypes::id_or_mac >::stream(s, obj.id_or_mac, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "description_type: ";
    YamlStreamer< ::dronecan::remoteid::SelfID::FieldTypes::description_type >::stream(s, obj.description_type, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "description: ";
    YamlStreamer< ::dronecan::remoteid::SelfID::FieldTypes::description >::stream(s, obj.description, level + 1);
}

}

namespace dronecan
{
namespace remoteid
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::dronecan::remoteid::SelfID::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::dronecan::remoteid::SelfID >::stream(s, obj, 0);
    return s;
}

} // Namespace remoteid
} // Namespace dronecan

#endif // DRONECAN_REMOTEID_SELFID_HPP_INCLUDED